[["index.html", "GMUG National Forests Group Selection Study Chapter 1 Objective", " GMUG National Forests Group Selection Study George Woolsey 2022-10-08 Chapter 1 Objective The objective of this analysis is to describe the site conditions for a group selection treatment on the Grand Mesa Uncompahgre and Gunnison National Forests (GMUG). The study being installed includes different sized group selection openings or reserve groups. This analysis seeks to quantify: the frequency of group opening or reserve group sizes for each of the harvest units. The frequency in each of the opening sizes or reserves within each harvest unit by aspect (the compass direction or azimuth that a terrain surface faces). The shape of the openings sizes in terms of the compass direction that the terrain surface faces with respect to the long axis and short axis This experiment aims to represent group openings with different sizes and the aspects in order to measure differences in light, snow accumulation, and seedling growth. Ideally, sample stratification will be determined by group size and aspect. According to the FACTS Activity Code Description, a Group Selection Cut (code 4152) is: An uneven-aged regeneration method in which trees are cut in small groups and new age classes are established. The width of groups is commonly less than approximately twice the height of the mature trees. Individual trees in the matrix may or may not be harvested to provide improved growing conditions for remaining trees. Multiple entries of this activity ultimately results in an uneven-aged stand of 3 or more age classes. "],["import_data.html", "Chapter 2 Import Data 2.1 National Forest Management data download 2.2 Load Treatment data 2.3 Load Elevation Data 2.4 Aspect and HLI 2.5 Attach topography and HLI to groups", " Chapter 2 Import Data # turn off the s2 processing ## https://stackoverflow.com/questions/68478179/how-to-resolve-spherical-geometry-failures-when-joining-spatial-data sf::sf_use_s2(FALSE) # set crs my_crs &lt;- 5070 # EPSG:5070 = NAD83/Conus Albers (units = meters); EPSG:4326 = WGS 84 (units = dd); EPSG:4269 = NAD83 (units = dd) 2.1 National Forest Management data download The Forest Activity Tracking System (FACTS) database maintained by the U.S. Department of Agriculture, Forest Service (USFS) includes georeferenced boundaries of national forests. # load boundary shapefile forests &lt;- sf::st_read(&quot;../data/forests.gpkg&quot;) %&gt;% rename_with(~ tolower( gsub(&quot; &quot;, &quot;_&quot;, str_trim(gsub(&quot;\\\\s+&quot;, &quot; &quot;, .x)) ) )) %&gt;% sf::st_transform(my_crs) # EPSG:4326 = WGS 84 # keep GMUG gmug &lt;- forests %&gt;% dplyr::filter( forest_commonname %in% c( &quot;Grand Mesa National Forest&quot; , &quot;Uncompahgre National Forest&quot; , &quot;Gunnison National Forest&quot; ) ) %&gt;% sf::st_union() 2.1.1 GMUG Map mapview::mapviewOptions(homebutton = FALSE, basemaps = c(&quot;Esri.WorldTopoMap&quot;)) # &quot;Esri.WorldImagery&quot; mapview::mapview( x = gmug , color = &quot;black&quot; , lwd = 4 , alpha.regions = 0 , label = FALSE , legend = FALSE , popup = FALSE , map.types = &quot;Esri.WorldTopoMap&quot; # &quot;Esri.WorldImagery&quot; ) 2.2 Load Treatment data ############################ # load shapefiles ############################ shp_import_fn &lt;- function(pth){ # import dta &lt;- sf::st_read(pth) %&gt;% dplyr::filter(sf::st_is_valid(.)) %&gt;% rename_with(~ tolower( gsub(&quot; &quot;, &quot;_&quot;, str_trim(gsub(&quot;\\\\s+&quot;, &quot; &quot;, .x)) ) )) %&gt;% sf::st_transform(crs = sf::st_crs(forests)) %&gt;% dplyr::mutate(area_m2 = as.numeric(sf::st_area(.))) %&gt;% dplyr::arrange(desc(area_m2)) %&gt;% dplyr::mutate(shape_id = dplyr::row_number()) #rename sf geom column names(dta)[names(dta)==tolower(attr(dta, &quot;sf_column&quot;))] = &quot;geometry&quot; sf::st_geometry(dta) = &quot;geometry&quot; # return return(dta) } # group selection openings openings &lt;- shp_import_fn(&quot;../data/Bald_all_groups.shp&quot;) %&gt;% dplyr::mutate(group = &quot;Openings&quot;) # group selection reserve groups reserves &lt;- shp_import_fn(&quot;../data/Bald_all_Reserve_grps.shp&quot;) %&gt;% dplyr::mutate(group = &quot;Reserves&quot;) # harvest units units &lt;- shp_import_fn(&quot;../data/UnitEstimate.shp&quot;) # combine all_groups &lt;- dplyr::bind_rows( openings %&gt;% dplyr::select(shape_id, group, area_m2) , reserves %&gt;% dplyr::select(shape_id, group, area_m2) ) 2.2.1 Group summary statistics #summary all_groups %&gt;% sf::st_set_geometry(NULL) %&gt;% dplyr::group_by(group) %&gt;% dplyr::summarise( N = n() , mean_area = mean(area_m2, na.rm = T) , min_area = min(area_m2, na.rm = T) , max_area = max(area_m2, na.rm = T) ) %&gt;% kableExtra::kable( caption = &quot;Summary statistics by group type&quot; , col.names = c( &quot;Group Type&quot; , &quot;n&quot; , &quot;Mean Area (m sq.)&quot; , &quot;Min. Area (m sq.)&quot; , &quot;Max. Area (m sq.)&quot; ) ) %&gt;% kableExtra::kable_styling(font_size = 12) %&gt;% kableExtra::column_spec(1, bold = TRUE, width = &quot;18em&quot;) 2.2.2 Group sizes all_groups %&gt;% sf::st_set_geometry(NULL) %&gt;% ggplot( data = . , mapping = aes(x = area_m2, group = group) ) + geom_histogram( aes(y = ..density.., fill = group) , bins = 15 , color = &quot;gray25&quot; ) + facet_grid(group~.) + scale_x_continuous(breaks = scales::extended_breaks(n=10), labels = scales::comma) + scale_fill_viridis_d(option = &quot;cividis&quot;, alpha = 0.8) + xlab(latex2exp::TeX(&quot;area $m^2$&quot;)) + ylab(&quot;Density&quot;) + labs( title = &quot;Group Area Histogram&quot; ) + theme_bw() + theme( legend.position = &quot;none&quot; ) 2.2.3 GMUG and treatment area map ggplot() + geom_sf( data = gmug , alpha = 0 , lwd = 1, color = &quot;black&quot; ) + geom_sf( data = units %&gt;% sf::st_union() %&gt;% sf::st_buffer(dist = 500) , fill = &quot;royalblue&quot; , lwd = NA ) + labs( title = &quot;GMUG boundary and treatment area in blue&quot; ) + theme_bw() + theme( legend.position = &quot;none&quot; , axis.text.y = element_text(size = 7) , axis.text.x = element_text(size = 7, angle = 35, hjust = 0.7) , panel.border = element_blank() ) 2.2.4 Treatment units and group map ggplot() + geom_sf( data = units , mapping = aes(fill = unit_numbe) , lwd = 0.8, color = &quot;black&quot; ) + geom_sf(data = openings, fill = &quot;white&quot;, color = &quot;firebrick&quot;, lwd = 1) + geom_sf(data = reserves, fill = &quot;black&quot;, color = &quot;black&quot;) + scale_fill_viridis_d(option = &quot;turbo&quot;, alpha = 0.4) + labs( title = &quot;Harvest treatment units and groups&quot; , subtitle = &quot;Reserves = black, Openings = white&quot; ) + theme_bw() + theme( legend.position = &quot;none&quot; , axis.text.y = element_text(size = 7) , axis.text.x = element_text(size = 7, angle = 35, hjust = 0.7) , panel.border = element_blank() ) 2.3 Load Elevation Data The function elevatr::get_elev_raster was used to obtain a digital elevation model (DEM) raster (~6.8m resolution). ####################################################### ####################################################### # read elevation data ####################################################### ####################################################### if(file.exists(&quot;../data/elev.tif&quot;) == FALSE){ # z =14 is highest resolution (~6.8m) elev &lt;- elevatr::get_elev_raster( locations = units %&gt;% sf::st_union() %&gt;% sf::st_buffer(dist = 100) , z = 14 ) %&gt;% stars::st_as_stars() %&gt;% setNames(&quot;elev&quot;) # save stars::write_stars(elev, &quot;../data/elev.tif&quot;, append = FALSE) }else{ elev &lt;- stars::read_stars(&quot;../data/elev.tif&quot;) } 2.3.1 Elevation plot # plot ggplot() + stars::geom_stars(data = elev[ units %&gt;% sf::st_union() %&gt;% sf::st_buffer(dist = 200) %&gt;% sf::st_bbox() ]) + scale_fill_viridis_c(option = &quot;viridis&quot;, alpha = 0.9, na.value = &quot;transparent&quot;) + geom_sf(data = units, alpha = 0, lwd = 1, color = &quot;black&quot;) + labs( title = &quot;GMUG Treatment Units Elevation Map&quot; , subtitle = sf::st_crs(elev)$input ) + xlab(&quot;&quot;) + ylab(&quot;&quot;) + scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) + theme_bw() + theme( legend.position = &quot;bottom&quot; , legend.direction = &quot;horizontal&quot; , legend.margin = margin(0,0,0,0) , legend.box.margin = margin(-21,0,2,0) , legend.text = element_text(size = 7) , legend.title = element_text(size = 7) , axis.text.y = element_text(size = 7) , axis.text.x = element_text(size = 7, angle = 35, hjust = 0.7) , panel.border = element_blank() ) + guides( fill = guide_legend(title=&quot;Elev. (m)&quot;) ) 2.4 Aspect and HLI Aspect of a slope (the direction or azimuth that a slope faces) strongly influences potential direct incident radiation and temperature. Untransformed, aspect is a poor variable for quantitative analysis, since 1째 is adjacent to 360째  the numbers are very different even though the aspect is about the same. The following equation for Heat Load Index (HLI) rescales aspect to a scale of zero to one, with zero being the coolest slope (northeast) and one being the warmest slope (southwest). HLI is a proxy for aspect-driven solar heating. \\[ \\textrm{Heat load index} = \\frac{1 - \\cos(\\theta - 45)}{2} \\] where \\(\\theta\\) = aspect in degrees east of north. While this and related equations are useful, they do not consider the steepness of the slope. For example, a 1째 south-facing slope would receive the same heat load index as a 30째 south-facing slope, even though the latter will be considerably warmer. HLI calculations have been developed which combine slope, folded aspect (i.e., southwestness), and latitude to estimate terrain-driven solar heating at a given location (McCune &amp; Keon 2002: eq. 2). To calculate HLI, we used equation 2 of McCune &amp; Keon 2002: eq. 2. Following calculation, we aggregated these data to each group selection boundary (median HLI of ~6.8m pixels). Higher values of HLI are typical on steep southwesterly slopes, while low values are common on steep northeasterly slopes. Moderate values are common in flatter terrain and on northwesterly and southeasterly aspects. Aspect must first be folded about the north-south line, rescaling 0-360째 to 0-180째, such that NE = NW, E = W, etc: \\[ \\textrm{Folded aspect째} = 180째 \\, - \\, | Aspect째  180째 | \\] # extract latitude degrees from stars object lats &lt;- sf::st_coordinates(elev) %&gt;% sf::st_as_sf(coords = c(&quot;x&quot;, &quot;y&quot;), crs = my_crs) %&gt;% sf::st_transform(crs = 4326) %&gt;% sf::st_coordinates() %&gt;% dplyr::as_tibble() %&gt;% setNames(c(&quot;longitude&quot;,&quot;latitude&quot;)) %&gt;% dplyr::select(latitude) # hli function hli_fn &lt;- function(slope_rad, folded_aspect_rad, latitude_rad){ -1.236 +1.350*cos(latitude_rad)*cos(slope_rad) -1.376*cos(folded_aspect_rad)*sin(slope_rad)*sin(latitude_rad) -0.331*sin(latitude_rad)*sin(slope_rad) +0.375*sin(folded_aspect_rad)*sin(slope_rad) } # calculate slope and aspect from DEM topo &lt;- c( elev , starsExtra::slope(elev) , starsExtra::aspect(elev) ) %&gt;% setNames( c(&quot;elev&quot;, &quot;slope_deg&quot;, &quot;aspect_deg&quot;) ) %&gt;% dplyr::mutate( slope_rad = pracma::deg2rad(as.numeric(slope_deg)) , aspect_rad = pracma::deg2rad(as.numeric(aspect_deg)) , folded_aspect_deg = 180 - abs(as.numeric(aspect_deg)-180) , folded_aspect_rad = pracma::deg2rad(folded_aspect_deg) , latitude_deg = lats$latitude , latitude_rad = pracma::deg2rad(as.numeric(latitude_deg)) , hli = hli_fn(slope_rad, folded_aspect_rad, latitude_rad) ) 2.4.1 Topography maps # map vars &lt;- c( &quot;elev&quot; , &quot;slope_deg&quot; , &quot;aspect_deg&quot; , &quot;folded_aspect_deg&quot; , &quot;hli&quot; ) vars_title &lt;- c( &quot;Elevation (m)&quot; , &quot;Slope (\\u00B0)&quot; , &quot;Aspect (\\u00B0)&quot; , &quot;Folded Aspect (\\u00B0)&quot; , &quot;Heat Load Index (HLI)&quot; ) vars_color &lt;- c( &quot;viridis&quot; , &quot;cividis&quot; , &quot;rocket&quot; , &quot;mako&quot; , &quot;turbo&quot; ) # plts &lt;- list() plt_fn &lt;- function(x){ ( ggplot() + stars::geom_stars(data = (topo %&gt;% dplyr::select(vars[x]))[ units %&gt;% sf::st_union() %&gt;% sf::st_buffer(dist = 200) %&gt;% sf::st_bbox() ]) + scale_fill_viridis_c(option = vars_color[x], alpha = 0.9, na.value = &quot;transparent&quot;) + geom_sf(data = units, alpha = 0, lwd = 1, color = &quot;black&quot;) + labs( title = vars_title[x] ) + xlab(&quot;&quot;) + ylab(&quot;&quot;) + scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) + theme_bw() + theme( legend.margin = margin(0,0,0,0) , legend.text = element_text(size = 7) , legend.title = element_text(size = 7) , axis.text.y = element_text(size = 7) , axis.text.x = element_text(size = 7, angle = 35, hjust = 0.7) , panel.border = element_blank() ) + guides( fill = guide_legend(title=vars_title[x]) ) ) } # combine plots # cowplot::plot_grid(plotlist = plts, ncol = 2) c(1:length(vars)) %&gt;% purrr::map(plt_fn) 2.5 Attach topography and HLI to groups # functions to aggregate raster data to vector data topo_calc_fn &lt;- function(dta){ # calculate median aspect and slope by vector temp_slope &lt;- aggregate(topo %&gt;% dplyr::select(slope_rad), dta, median) temp_aspect &lt;- aggregate(topo %&gt;% dplyr::select(aspect_rad), dta, median) temp_folded_aspect &lt;- aggregate(topo %&gt;% dplyr::select(folded_aspect_rad), dta, median) temp_hli &lt;- aggregate(topo %&gt;% dplyr::select(hli), dta, median) # vector center temp_center &lt;- sf::st_centroid(dta)$geometry %&gt;% sf::st_transform(crs = 4326) %&gt;% sf::st_coordinates() %&gt;% dplyr::as_tibble() %&gt;% setNames(c(&quot;longitude&quot;,&quot;latitude&quot;)) %&gt;% dplyr::select(latitude) # attach to input data new_dta &lt;- dta %&gt;% dplyr::mutate( # radians slope_rad = temp_slope$slope_rad , aspect_rad = temp_aspect$aspect_rad , folded_aspect_rad = temp_folded_aspect$folded_aspect_rad , latitude_rad = pracma::deg2rad(as.numeric(temp_center$latitude)) # degrees , slope_deg = pracma::rad2deg(temp_slope$slope_rad) , aspect_deg = pracma::rad2deg(temp_aspect$aspect_rad) , folded_aspect_deg = pracma::rad2deg(temp_folded_aspect$folded_aspect_rad) , latitude_deg = as.numeric(temp_center$latitude) # hli , hli = temp_hli$hli ) return(new_dta) } # apply to data all_groups &lt;- all_groups %&gt;% topo_calc_fn() 2.5.1 Example group and topography plt_grp_fn &lt;- function(x){ temp_dta &lt;- all_groups %&gt;% dplyr::filter(group == &quot;Openings&quot;) %&gt;% dplyr::slice_head(n = 1) return( ggplot() + stars::geom_stars(data = (topo %&gt;% dplyr::select(vars[x]))[ temp_dta %&gt;% sf::st_buffer(dist = 30) ]) + scale_fill_viridis_c(option = vars_color[x], alpha = 0.9, na.value = &quot;transparent&quot;) + geom_sf(data = temp_dta , alpha = 0, lwd = 1.1, color = &quot;black&quot; ) + labs( title = paste0(&quot;Example group (area = &quot; , scales::comma(temp_dta$area_m2, accuracy = 1) , &quot; m sq.)&quot; ) , subtitle = vars_title[x] ) + xlab(&quot;&quot;) + ylab(&quot;&quot;) + scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) + theme_bw() + theme( legend.margin = margin(0,0,0,0) , legend.text = element_text(size = 7) , legend.title = element_text(size = 7) , axis.text.y = element_text(size = 7) , axis.text.x = element_text(size = 7, angle = 35, hjust = 0.7) , panel.border = element_blank() ) + guides( fill = guide_legend(title=vars_title[x]) ) ) } c(1:length(vars)) %&gt;% purrr::map(plt_grp_fn) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
